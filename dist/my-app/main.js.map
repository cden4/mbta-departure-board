{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/departure-board/departure-board.component.css","webpack:///./src/app/departure-board/departure-board.component.html","webpack:///./src/app/departure-board/departure-board.component.ts","webpack:///./src/app/departure.service.ts","webpack:///./src/app/departure.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"h1 {\\n    text-align: center;\\n}\"","module.exports = \"<div>\\n  <h1 class=\\\"center\\\">{{ title }}</h1>\\n  <app-departure-board></app-departure-board>\\n</div>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'MBTA Commuter Rail Departure Board';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule }    from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { DepartureBoardComponent } from './departure-board/departure-board.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DepartureBoardComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"table, th, td {\\n    border: 1px solid black;\\n}\\n\\ntable {\\n    border-collapse: collapse;\\n    margin-left: auto;\\n    margin-right: auto;\\n}\\n\\nth, td {\\n    padding: 5px;\\n}\\n\\n.left {\\n    text-align: left;\\n}\\n\\n.center {\\n    text-align: center;\\n}\\n\\n.right {\\n    text-align: right;\\n}\"","module.exports = \"<p class=\\\"center\\\">Current Time: {{ currentDateTime | date:\\\"EEEE M/d/yyyy h:mm a\\\" }}</p>\\n<table>\\n  <tr>\\n    <th>Destination</th>\\n    <th>Scheduled Time</th>\\n    <th>Station</th>\\n    <th>Platform</th>\\n    <th>Status</th>\\n  </tr>\\n  <tr *ngFor=\\\"let departure of departures\\\">\\n    <td class=\\\"left\\\">{{ departure.destination }}</td>\\n    <td class=\\\"center\\\">{{ departure.departureTime | date:\\\"h:mm a\\\" }}</td>\\n    <td class=\\\"left\\\">{{ departure.station }}</td>\\n    <td class=\\\"center\\\">{{ departure.trackNumber }}</td>\\n    <td class=\\\"left\\\">{{ departure.boardingStatus }}</td>\\n  </tr>\\n</table>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Departure } from '../departure';\nimport { DepartureService } from '../departure.service';\n\n@Component({\n  selector: 'app-departure-board',\n  templateUrl: './departure-board.component.html',\n  styleUrls: ['./departure-board.component.css']\n})\nexport class DepartureBoardComponent implements OnInit {\n  currentDateTime: Date;\n  departures: Departure[];\n\n  constructor(private departureService: DepartureService) { }\n\n  ngOnInit() {\n    this.refreshData();\n    setInterval(() => this.refreshData(), 30000); // refresh data every 30 seconds\n  }\n\n  refreshData(): void {\n    this.currentDateTime = new Date();\n    this.departureService.getDepartures()\n      .subscribe(departures => this.departures = departures);\n      \n  }\n\n}\n","import { formatDate } from '@angular/common';\nimport { HttpClient, HttpEvent, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { Departure } from './departure';\nimport { DEPARTURES } from './mock-departures';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DepartureService {\n\n  private url = 'https://api-v3.mbta.com/schedules';\n\n  constructor(private http: HttpClient) { }\n\n  private extractData(res: any, runTime: Date): Departure[] {\n    //console.log(res); // for debugging\n\n    //Destination: schedule.relationships.trip.headsign\n    //Departure Time: schedule.attributes.departure_time\n    //Station: schedule.relationships.stop.data.id e.g. \"South Station\"\n    //Track Number: schedule.relationships.prediction.relationships.stop.data.id e.g. \"South Station-10\"\n    //Boarding Status: schedule.relationships.prediction.attributes.status\n\n    // Create maps for included data\n    let included: any[] = res.included;\n\n    let tripIdHeadsignMap: Map<string, string> = new Map<string, string>();\n    let predictionIdMap: Map<string, { status: string, stopId: string }> = new Map<string, { status: string, stopId: string }>();\n\n    if (included != undefined) { // included section does not exist when data section is empty\n      for (var j = 0; j < included.length; j++) {\n        let type: string = included[j].type;\n        let id: string = included[j].id;\n\n        if (type === 'trip') {\n          let headsign: string = included[j].attributes.headsign;\n          tripIdHeadsignMap.set(id, headsign);\n        } else if (type === 'prediction') {\n          let status: string = included[j].attributes.status;\n          let stopId: string = included[j].relationships.stop.data.id;\n          predictionIdMap.set(id, { status, stopId });\n        }\n      }\n    }\n    \n    // Loop through schedule data to create Departures\n    let maxDeparturesToDisplay: number = 20;\n    let departures: Departure[];\n    let departureCount: number = 0;\n\n    let data: any[] = res.data;\n    if (data == null) {\n      departures = new Departure[0];\n      console.log('Error: ' + res);\n    } else {\n      for (var i = 0; i < data.length && departureCount < maxDeparturesToDisplay; i++) {\n        let id: string = data[i].id;\n\n        let tripId: string = data[i].relationships.trip.data.id;\n        let destination: string = tripIdHeadsignMap.get(tripId);\n\n        let departureTime: string = data[i].attributes.departure_time; \n\n        let station: string = data[i].relationships.stop.data.id;\n\n        let predictionId: string = data[i].relationships.prediction.data != null ? data[i].relationships.prediction.data.id : null;\n        let predictionStopId: string = predictionIdMap.get(predictionId) && predictionIdMap.get(predictionId).stopId;\n\n        // When track number is known, stop_id on prediction reflects that (e.g. 'South Station-10' instead of 'South Station').\n        // platform_code on this stop's attributes also contains this data, but would require another roundtrip to the server to retrieve it.\n        // Parse number from end of stopId and strip off leading zero. Default to 'TBD'.\n        let trackNumber: string = predictionStopId && predictionStopId.indexOf('-') != -1 ? \n          Number(predictionStopId.substring(predictionStopId.indexOf('-') + 1)).toString() : 'TBD';\n        \n        // Use prediction status if prediction exists. Default to 'On time'.\n        let boardingStatus: string = predictionIdMap.get(predictionId) != null ? predictionIdMap.get(predictionId).status : 'On time';\n        \n        // If scheduled time is less than current time, but a prediction exists, display it (train just departed or is late)\n        // Otherwise, always display it\n        if ((new Date(departureTime) < runTime && predictionId != null) || new Date(departureTime) >= runTime) {\n          if (departures == null) {\n            departures = new Array<Departure>(Math.min(data.length - i, maxDeparturesToDisplay));\n          }\n\n          let departure: Departure = \n          { \n            destination: destination,\n            departureTime: departureTime,\n            station: station,\n            trackNumber: trackNumber,\n            boardingStatus: boardingStatus\n          }\n          departures[departureCount] = departure;\n          departureCount++;\n        }\n      }\n    }\n\n    return departures;\n  }\n\n  getDepartures(): Observable<Departure[]> {\n    let now: Date = new Date();\n\n    // Retrieve data starting 2 hours prior to now in case there are late trains\n    let hours: number = now.getHours() - 2;\n\n    // If current time is between midnight and 3 am, use prior day, with hour + 24\n    if (hours <= 3) {\n      now.setDate(now.getDate() - 1);\n      hours = hours + 24;\n    }\n\n    let hoursStr: string = hours < 10 ? '0' + hours.toString() : hours.toString();\n\n    let dateFilter: string = formatDate(now, 'yyyy-MM-dd', 'en-US');\n    let minTimeFilter: string = hoursStr + ':' + formatDate(now, 'mm', 'en-US');\n\n    let params: HttpParams = new HttpParams()\n      .set('filter[stop]', 'North Station,South Station')\n      .set('filter[direction_id]', '0')\n      .set('filter[date]', dateFilter)\n      .set('filter[min_time]', minTimeFilter)\n      .set('sort', 'departure_time')\n      .set('include', 'prediction,trip');\n\n    console.log(this.url + '?' + params.toString()); // for debugging\n\n    return this.http.get(this.url, { params }).pipe(map(res => this.extractData(res, now)));\n    //return of (DEPARTURES); // return mock data for testing\n  }\n\n}\n","export class Departure {\n    destination: string;\n    departureTime: string;\n    station: string;\n    trackNumber: string;\n    boardingStatus: string;\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}